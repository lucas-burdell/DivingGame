<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_diver_suit_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init variables

// original scale
original_xscale = image_xscale

hsp = 0; //horizontal speed
vsp = 10; //vertical speed


//stats
maxSpeed = 7 + (8 * storage.Tier_Flippers / 5);
speedDecay = .1;
facingDirection = 1
flipping = false

drowning = false
drowning_sound = -1

//oxygen levels
//with (storage) {
    storage.current_oxygen = storage.maximum_oxygen;
//}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pressure Suit limiter
// In meters (NOT px)
limiter = 0; // Default (not used)

if (storage.Tier_Pressure_Suit == 0) {
        limiter = 2800;

} else if (storage.Tier_Pressure_Suit == 1) {
        limiter = 5600;
} else if (storage.Tier_Pressure_Suit == 2) {
        limiter = 8200;
} else if (storage.Tier_Pressure_Suit == 3) {
        limiter = room_height / 3;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initial Item Statuses

image_speed = 0; // Remove subimaging animation

image_index = storage.Tier_Pressure_Suit; // Which pressure suit on spawn

pingTimer = 120 - (90 * storage.Tier_Sonar / 4);

canPing = pingTimer; // Sonar timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character Controls

leftDown = keyboard_check(ord('A'));
rightDown = keyboard_check(ord('D'));
wDown = keyboard_check(ord('W'));
sDown = keyboard_check(ord('S'));
sonarPressed = keyboard_check_pressed(vk_space);



delta_hsp = (rightDown) + (leftDown * -1) + hsp;
delta_hsp = delta_hsp - (sign(delta_hsp) * speedDecay * (1 - (rightDown or leftDown)))
delta_hsp = min(max(-maxSpeed, delta_hsp), maxSpeed)
delta_vsp = (wDown * -1) + sDown + vsp;
delta_vsp = delta_vsp - (sign(delta_vsp) * speedDecay  * (1 - (wDown or sDown)))
delta_vsp = min(max(-maxSpeed, delta_vsp), maxSpeed)

if (flipping == 0 and leftDown and facingDirection&gt;-1) {
   flipping = -1
} else if (flipping == 0 and rightDown and facingDirection&lt;1) {
  flipping = 1
}

if (flipping == -1) {
   facingDirection = max(-1, facingDirection + flipping / 10)   
   if (facingDirection &lt;= -1) {
      facingDirection = -1
      flipping = 0
   }
} else if (flipping == 1) {
   facingDirection = min(1, facingDirection + flipping / 10)   
   if (facingDirection &gt;= 1) {
      facingDirection = 1
      flipping = 0
   }
}

image_xscale = facingDirection * original_xscale

//horizontal collision checks

if (x + delta_hsp) + (sprite_width / 2) &gt; room_width {
   hsp = 0
   delta_hsp = 0
   x = room_width - (sprite_width / 2)
//   x = room_width - (sprite_width)   
} else if (x + delta_hsp) - (sprite_width / 2) &lt; 0 {
  hsp = 0
  delta_hsp = 0
  x = 0 + (sprite_width / 2)
// x = sprite_width
}

if (place_meeting(x, y, Collidable)) {
   if (flipping != 0) {
      x += 3 * -flipping
   } else {
     for (i=1;i &lt; 50; i+=5) {
         if (!place_meeting(x + i, y, Collidable)) {
            x = x + i
            hsp = 0
            delta_hsp = 0
            vsp = 0
            delta_vsp = 0
            break
         } else if (!place_meeting(x - i, y, Collidable)) {
           x = x - i
           hsp = 0
           delta_hsp = 0
           vsp = 0
           delta_vsp = 0
           break
         } else if (!place_meeting(x, y - i, Collidable)) {
           y = y - i
           hsp = 0
           delta_hsp = 0
           vsp = 0
           delta_vsp = 0
           break
         } else if (!place_meeting(x, y + i, Collidable)) {
           y = y + i
           hsp = 0
           delta_hsp = 0
           vsp = 0
           delta_vsp = 0
           break
         }
     }
   }
}


if (place_meeting(x + delta_hsp, y, Collidable)) {
    while(!place_meeting(x + sign(delta_hsp), y, Collidable)) {
        x += sign(delta_hsp);
    }
    hsp = 0;
} else {
  x += (delta_hsp);
  hsp = delta_hsp;
}

//vertical collision checks

if (y + delta_vsp)  + (sprite_height / 2) &gt; limiter * 3 {
   vsp = 0
   delta_vsp = 0
   y = limiter * 3 - (sprite_height)   
} else if (y + delta_vsp) - (sprite_height / 2) &lt; 0 {
  vsp = 0
  delta_vsp = 0
  y = sprite_height
}


if (place_meeting(x, y + delta_vsp, Collidable)) {
    while(!place_meeting(x, y + sign(delta_vsp), Collidable)) {
        y += sign(delta_vsp);
    }
    vsp = 0;
} else {
  y += (delta_vsp);
  vsp = delta_vsp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth Counter
var curdepth = floor(y / 3)

storage.current_depth = curdepth;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Oxygen Counter

storage.current_oxygen = storage.current_oxygen - (1/60);

if (storage.current_oxygen &lt;= 15.5 and !drowning) {
   drowning = true
   audio_play_sound(snd_drowning, 20, false)
}
if (storage.current_oxygen &gt; 30 and drowning) {
   if audio_exists(snd_drowning) {
      audio_stop_sound(snd_drowning)
   }
   drowning = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ping timer
if (canPing &lt; pingTimer) {
    canPing += 1;
}

image_index = storage.Tier_Pressure_Suit;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="OBJ_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>storage.current_oxygen -= 30;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Fish_Grab">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get an Upgrade Point
storage.Upgrade_Points += 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="_chest_">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get 3 Upgrade Points
storage.Upgrade_Points += 3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if audio_exists(snd_drowning) {
   audio_stop_sound(snd_drowning)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ping_range = 500 + (125 * storage.Tier_Sonar);

if (canPing &gt;= pingTimer) {

        audio_play_sound(snd_player_sonar, 1, false)   
    with (OBJ_Pingable) {
        if (point_distance(self.x, self.y, other.x, other.y) &lt;= obj_diver.ping_range) {
            instance_create(self.x, self.y, obj_ping);
            
        }
    }
    canPing = 1;
    show_debug_message("reset canPing");
    show_debug_message(pingTimer);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (distance_to_object(obj_divingbell) &lt; 30) {
    room_goto(RM_Shop);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
