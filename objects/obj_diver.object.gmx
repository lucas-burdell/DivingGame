<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_diver</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init variables
hsp = 0; //horizontal speed
vsp = 10; //vertical speed


//constant
maxSpeed = 10;
speedDecay = .1;

//oxygen levels
//with (storage) {
    storage.current_oxygen = storage.maximum_oxygen;
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character Controls

leftDown = keyboard_check(ord('A'));
rightDown = keyboard_check(ord('D'));
wDown = keyboard_check(ord('W'));
sDown = keyboard_check(ord('S'));
sonarPressed = keyboard_check_pressed(vk_space);



delta_hsp = (rightDown) + (leftDown * -1) + hsp;
delta_hsp = delta_hsp - (sign(delta_hsp) * speedDecay * (1 - (rightDown or leftDown)))
delta_hsp = min(max(-maxSpeed, delta_hsp), maxSpeed)
delta_vsp = (wDown * -1) + sDown + vsp;
delta_vsp = delta_vsp - (sign(delta_vsp) * speedDecay  * (1 - (wDown or sDown)))
delta_vsp = min(max(-maxSpeed, delta_vsp), maxSpeed)

//horizontal collision checks

if (x + delta_hsp) + (sprite_width / 2) &gt; room_width {
   hsp = 0
   delta_hsp = 0
//   x = room_width - (sprite_width)   
} else if (x + delta_hsp) - (sprite_width / 2) &lt; 0 {
  hsp = 0
  delta_hsp = 0
// x = sprite_width
}

if (place_meeting(x + delta_hsp, y, other)) {
    while(!place_meeting(x + sign(delta_hsp), y, obj_floor)) {
        x += sign(delta_hsp);
    }
    hsp = 0;
} else {
  x += (delta_hsp);
  hsp = delta_hsp;
}

//vertical collision checks

if (y + delta_vsp)  + (sprite_height / 2) &gt; room_height {
   vsp = 0
   delta_vsp = 0
 //  y = room_height - (sprite_height)   
} else if (y + delta_vsp) - (sprite_height / 2) &lt; 0 {
  vsp = 0
  delta_vsp = 0
//  y = sprite_height
}


if (place_meeting(x, y + delta_vsp, other)) {
    while(!place_meeting(x, y + sign(delta_vsp), obj_floor)) {
        y += sign(delta_vsp);
    }
    vsp = 0;
} else {
  y += (delta_vsp);
  vsp = delta_vsp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth Counter
var curdepth = floor(y / 3)

storage.current_depth = curdepth;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Oxygen Counter

storage.current_oxygen = storage.current_oxygen - (1/60);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(make_color_rgb(255,255,255))
draw_text(view_xview[view_current], view_yview[view_current], "depth: " + string(storage.current_depth) + " meters");
draw_set_color (make_color_rgb(255,255,255))
draw_text(view_xview[view_current], view_yview[view_current] + 16, "oxygen: " + string(storage.current_oxygen));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
